#!/usr/bin/env python3
import argparse
import json
import subprocess
import sys



def _colorize(color_code, *args, sep=' '):
	"""
	Returns a colored string using ANSI escape codes.
	"""
	text = sep.join(map(str, args))
	return f"\033[{color_code}m{text}\033[0m"

def red(*args, sep=' '):
	return _colorize(31, *args, sep=sep)

def green(*args, sep=' '):
	return _colorize(32, *args, sep=sep)

def yellow(*args, sep=' '):
	return _colorize(33, *args, sep=sep)

def blue(*args, sep=' '):
	return _colorize(34, *args, sep=sep)

def magenta(*args, sep=' '):
	return _colorize(35, *args, sep=sep)

def cyan(*args, sep=' '):
	return _colorize(36, *args, sep=sep)

def white(*args, sep=' '):
	return _colorize(37, *args, sep=sep)

def normal(*args, sep=' '):
	return sep.join(map(str, args))


be_verbose = False
def verbose(*args, **kwargs):
	if be_verbose:
		print(*args, **kwargs)


def is_valid_hex_color(s: str) -> bool:
	if s.startswith("#"):
		s = s[1:]  # Remove the '#' if it exists

	if len(s) not in (3, 6):  # Hex colors should be 3 or 6 characters long
		return False

	try:
		int(s, 16)  # Try converting to an integer base 16
		return True
	except ValueError:
		return False

with open('data/htmlcolors.json') as f:
	htmlcolors = json.load(f)['colors']

def get_hex_color(arg: str) -> bool:
	if arg[0] == '#' and len(arg) in [4, 7] and is_valid_hex_color(arg):
		return arg

	if arg[0] != '#' and len(arg) in [3, 6] and is_valid_hex_color(arg):
		return f"#{arg}"

	for color in htmlcolors:
		if color['name'].lower() == arg.lower():
			return color['code']

	return None


def get_default_profile():
	"""Retrieve the default GNOME Terminal profile ID."""
	try:
		profile_id = subprocess.check_output(
			["gsettings", "get", "org.gnome.Terminal.ProfilesList", "default"],
			universal_newlines=True
		).strip().strip("'")
		return profile_id
	except subprocess.CalledProcessError:
		print("Error: Could not retrieve GNOME Terminal profile ID.")
		sys.exit(1)

def set_terminal_setting(setting, value, profile_id):
	profile = f"org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:{profile_id}/"
	command = [
		"gsettings", "set", profile,
		setting, str(value)
	]
	"""Apply GNOME Terminal settings using gsettings."""
	verbose(f"$ {green(' '.join(command))}")
	subprocess.run(command)


def main():
	parser = argparse.ArgumentParser(description="Modify GNOME Terminal settings.")
	parser.add_argument("-b", "--background", help="Set terminal background color (e.g., '#000000')")
	parser.add_argument("-f", "--foreground", help="Set terminal foreground color (e.g., '#ffffff')")
	parser.add_argument("-t", "--transparency", type=int, choices=range(0, 101, 5),
		help="Set terminal transparency (0-100, 0 = opaque, 100 = fully transparent)")
	parser.add_argument("-z", "--fontsize", type=int, help="Set terminal font size")
	parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
	args = parser.parse_args()

	profile_id = get_default_profile()
	global be_verbose
	be_verbose = args.verbose

	if args.background:
		color = get_hex_color(args.background)
		if color:
			set_terminal_setting("background-color", f"'{color}'", profile_id)
			print(f"Background color set to {color}")
		else:
			print(f"Invalid color: '{args.background}'")

	if args.foreground:
		color = get_hex_color(args.foreground)
		if color:
			set_terminal_setting("foreground-color", f"'{color}'", profile_id)
			print(f"Foreground color set to {color}")
		else:
			print(f"Invalid color: '{args.foreground}'")

	if args.transparency is not None:
		set_terminal_setting("use-transparent-background", "true", profile_id)
		set_terminal_setting("background-transparency-percent", args.transparency, profile_id)
		print(f"Transparency set to {args.transparency}%")

	if args.fontsize:
		font_setting = f"Monospace {args.fontsize}"
		subprocess.run(["gsettings", "set", "org.gnome.desktop.interface", "monospace-font-name", font_setting])
		print(f"Font size set to {args.fontsize}")


if __name__ == "__main__":
	main()
